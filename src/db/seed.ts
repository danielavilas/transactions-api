import * as fs from 'fs';
import path from 'path';
import * as dotenv from 'dotenv';

dotenv.config();

import { AppDataSource } from '../db';
import { Account } from '../entities/Account';
import { Transaction } from '../entities/Transaction';

const seedDatabase = async () => {
  console.time('Seed execution time');

  await AppDataSource.initialize();

  const accountRepository = AppDataSource.getRepository(Account);
  const transactionRepository = AppDataSource.getRepository(Transaction);

  const isLargeSeed = process.argv.includes('--large');
  const accountsDataFile = isLargeSeed ? 'data/accounts-api-large.json' : 'data/accounts-api.json';
  const transactionsDataFile = isLargeSeed ? 'data/transactions-api-large.json' : 'data/transactions-api.json';

  const accountsData = JSON.parse(fs.readFileSync(path.join(__dirname, accountsDataFile), 'utf-8'));
  const transactionsData = JSON.parse(fs.readFileSync(path.join(__dirname, transactionsDataFile), 'utf-8'));

  for (const accountData of accountsData) {
    const account = new Account();
    Object.assign(account, accountData);

    try {
      await accountRepository.save(account);
    } catch (error: any) {
      console.log('Error trying to create account', {
        message: error.message,
        detail: error.detail,
      });
    }
  }

  for (const transactionData of transactionsData) {
    const transaction = new Transaction();

    Object.assign(transaction, transactionData);

    // Remove null values for createdAt and let be generated by database
    if (!transaction.createdAt) {
      // @ts-ignore
      delete transaction.createdAt;
    }

    try {
      const account = await accountRepository.findOne({
        where: {
          userEmail: transaction.userEmail.toLowerCase()
        },
      });

      if (account) {
        transaction.account = account;
      }

      await transactionRepository.save(transaction);
    } catch (error: any) {
      console.log('Error trying to create transaction', {
        message: error.message,
        detail: error.detail,
      });
    }
  }

  console.timeEnd('Seed execution time');
  console.log('Database seeded!');
};

seedDatabase();
